def solution(L, x):
    low = 0  # 탐색을 시작할 최소 인덱스를 설정합니다.
    high = len(L) - 1  # 탐색을 시작할 최대 인덱스를 설정합니다.
    
    while low <= high:  # 최소 인덱스가 최대 인덱스보다 작거나 같을 때까지 반복합니다.
        mid = (low + high) // 2  # 중간 인덱스를 찾습니다. // 연산자는 정수 나눗셈을 의미합니다.
        if L[mid] == x:  # 만약 중간 위치의 값이 찾고 있는 값 x와 일치한다면,
            return mid  # 현재 중간 위치의 인덱스를 반환합니다.
        elif L[mid] > x:  # 만약 중간 위치의 값이 찾고 있는 값 x보다 크다면,
            high = mid - 1  # 탐색 범위를 줄여서 최대 인덱스를 중간 인덱스보다 하나 작게 설정합니다.
        else:
            low = mid + 1  # 만약 중간 위치의 값이 찾고 있는 값 x보다 작다면,
            # 탐색 범위를 줄여서 최소 인덱스를 중간 인덱스보다 하나 크게 설정합니다.
            
    return -1  # 위의 조건에 만족하는 값이 없을 경우 -1을 반환하여 값이 리스트에 없음을 표시합니다.
